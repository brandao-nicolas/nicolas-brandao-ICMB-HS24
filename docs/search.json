[
  {
    "objectID": "hw1/index.html",
    "href": "hw1/index.html",
    "title": "Assignment 1",
    "section": "",
    "text": "Assignment 1 was to create a repository to store my assignments and publish this website featuring a simple plot to verify that everything is working.",
    "crumbs": [
      "About",
      "Assignment 1"
    ]
  },
  {
    "objectID": "hw1/index.html#a-simple-plot",
    "href": "hw1/index.html#a-simple-plot",
    "title": "Assignment 1",
    "section": "A Simple Plot",
    "text": "A Simple Plot\nFor the simple plot, I decided to create a histogram of 1000 generated IQ scores. IQ scores are normally distributed with a mean of 100 and a standard deviation of 15.\n\nCode# Generate a sample of 1000 IQ scores from a normal distribution\n# with a mean of 100 and a standard deviation of 15\ngenerated_iq_scores &lt;- rnorm(n = 1000, mean = 100, sd = 15)\n\n# Create a histogram to visualize the distribution of the generated IQ scores\nhist(generated_iq_scores,\n     main = \"Distribution of Generated IQ Scores\",\n     xlab = \"IQ score\",\n     ylab = \"Frequency\")",
    "crumbs": [
      "About",
      "Assignment 1"
    ]
  },
  {
    "objectID": "hw2/index.html",
    "href": "hw2/index.html",
    "title": "Assignment 2",
    "section": "",
    "text": "Assignment 2 was to recreate an agent-based simulation of wealth distribution in R (originally in Python) and play around with the parameters to figure out how it works.",
    "crumbs": [
      "About",
      "Assignment 2"
    ]
  },
  {
    "objectID": "hw2/index.html#a-simulation-of-wealth-distribution",
    "href": "hw2/index.html#a-simulation-of-wealth-distribution",
    "title": "Assignment 2",
    "section": "A Simulation of Wealth Distribution",
    "text": "A Simulation of Wealth Distribution\nTo create an agent-based simulation of wealth distribution, we must first define three critical components: the population, the interaction and the transaction.\nPopulation\nThe first component we need to define is the population. How many agents are in the population and how is wealth initially distributed? For this first simulation, we have decided that there are 5000 agents in the population and that wealth is initially normally distributed (M = 100, SD = 20).\n\nCode# Load the necessary library\nsuppressMessages(library(tidyverse))\n\n# Set seed for reproducibility\nset.seed(123)\n\n# Define the initial population: 5000 agents (normally distributed with M = 100, sd = 20)\ngaussian_population &lt;- tibble(wealth = rnorm(5000, mean = 100, sd = 20))\n\n# Plot a histogram of the initial wealth distribution in the population\nggplot(gaussian_population, aes(x = wealth)) +\n    geom_histogram(binwidth = 10, fill = \"blue\", alpha = 0.7) +\n    labs(title = \"Initial Wealth Distribution in the Population (N = 5000)\",\n         x = \"Wealth\", y = \"Number of Agents\") +\n    theme_minimal() +\n    theme(plot.title = element_text(hjust = 0.5, face = \"bold\"))\n\n\n\n\n\n\n\nInteraction\nThe second component we need to define is the interaction. How are the agents selected that will interact with each other? For this first simulation, we have chosen a random interaction, where two agents are randomly selected from the population.\n\nCode# Define the random interaction\nrandom_interaction &lt;- function(population) {\n    # Randomly sample two agents from the population\n    sampled_agents &lt;- sample(1:nrow(population), 2)\n}\n\n\nTransaction\nThe third component we need to define is the transaction. How do agents interact with each other? For this first simulation, we have chosen the random-split transaction. The two interacting agents will add up their wealth and then divide it randomly between themselves.\n\nCode# Define the random split transaction\nrandom_split &lt;- function(agent_i_wealth, agent_j_wealth) {\n    # Calculate the total wealth of both agents\n    total_wealth &lt;- agent_i_wealth + agent_j_wealth\n    \n    # Allocate a random share of the total wealth to agent i\n    agent_i_new_wealth &lt;- runif(1, min = 0, max = total_wealth)\n    \n    # Allocate the remaining share of the total wealth to agent j\n    agent_j_new_wealth &lt;- total_wealth - agent_i_new_wealth\n    \n    # Return the updated wealth for both agents\n    return(c(agent_i_new_wealth, agent_j_new_wealth))\n}\n\n\nSimulation\nNow that we have defined the three critical components of an agent-based simulation, we can define the simulation. A simulation takes an initial population and at each time step selects agents using the defined interaction and then uses the defined transaction to simulate how they interact. In our case, the simulation randomly selects two agents from the population, adds up their wealth, and then randomly divides it again between them 200,000 times.\n\nCode# Define how a simulation is run\nsimulate &lt;- function(population, interaction, transaction, time_steps) {\n    for (t in seq_len(time_steps)) {\n          sampled_agents &lt;- interaction(population)\n          \n          # Get the wealth of the sampled agents\n          agents_wealth &lt;- population$wealth[sampled_agents]\n          \n          # Perform the transaction and update wealth\n          new_wealth &lt;- transaction(agents_wealth[1], agents_wealth[2])\n          \n          # Update the population wealth\n          population$wealth[sampled_agents] &lt;- new_wealth\n    }\n    \n    # Return the updated population\n    return(population)\n  }\n\n# Run the first simulation\nsimulation_1 &lt;- simulate(\n    population = gaussian_population,\n    interaction = random_interaction,\n    transaction = random_split,\n    time_steps = 200000\n)\n\n\nVisualization\nThere are several ways to visualize what happened in the simulation. Here we have plotted the initial wealth distribution in the population (blue) and the resulting wealth distribution after 200,000 random-split transactions between two random agents (green). The Gini coefficient (G) measures the wealth inequality in the population, ranging from 0 (very equal) to 1 (very unequal).\n\nCode# Define the Gini coefficient\ngini &lt;- function(population) {\n    # Sort the agents in the population by wealth\n    x &lt;- sort(population$wealth)\n    \n    # Get the number of agents in the population\n    n &lt;- length(x)\n    \n    # Calculate the numerator\n    numer &lt;- 2 * sum((1:n) * x)\n    \n    # Calculate the denominator\n    denom &lt;- n * sum(x)\n    \n    # Calculate the Gini coefficient\n    gini &lt;- ((numer / denom) - (n + 1) / n)\n    \n    # Return the Gini coefficient\n    return(gini)\n}\n\n# Plot histograms of wealth before and after the simulation\nggplot() +\n    # Histogram for \"Before the Simulation\"\n    geom_histogram(\n        data = gaussian_population,\n        aes(x = wealth, fill = \"Before the Simulation\"),\n        position = \"identity\",\n        alpha = 0.5,\n        binwidth = 20\n    ) +\n    # Histogram for \"After the Simulation\"\n    geom_histogram(\n        data = simulation_1,\n        aes(x = wealth, fill = \"After the Simulation\"),\n        position = \"identity\",\n        alpha = 0.5,\n        binwidth = 20\n    ) +\n    labs(\n        title = \"Wealth Distribution Before and After the Simulation\",\n        x = \"Wealth\",\n        y = \"Number of Agents\"\n    ) +\n    scale_fill_manual(\n    values = c(\n        \"Before the Simulation\" = \"blue\",\n        \"After the Simulation\" = \"green\"\n    ),\n    name = NULL,  # Title for the legend\n    labels = c(\n        paste(\"Before the Simulation (G = \",\n              round(gini(gaussian_population), 2), \")\", sep = \"\"),\n        paste(\"After the Simulation (G = \",\n              round(gini(simulation_1), 2), \")\", sep = \"\")\n        )\n    ) +\n    theme_minimal() +\n    theme(\n        plot.title = element_text(hjust = 0.5, face = \"bold\"),\n        legend.position = \"top\",\n        panel.grid.minor = element_blank()\n    ) +\n    guides(fill = guide_legend(title = NULL))",
    "crumbs": [
      "About",
      "Assignment 2"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "About",
    "section": "",
    "text": "Welcome! This website contains my assignments for the course “Introduction to Computational Modeling of Behavior” taught by Ven Popov at the University of Zurich (HS24).\nThe content will be continuously added during the semester.\n\n\n\n\n\n Back to top",
    "crumbs": [
      "About"
    ]
  }
]